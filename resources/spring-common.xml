<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd">
	<context:annotation-config/>  <!-- 注解生效 -->
	<context:component-scan base-package="com.st.mall.*.controller,com.st.mall.*.service"/>  <!--扫描包-修改 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 引入jdbc -->       <!-- 数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">	
	<property name="DriverClassName" value="${driverClass}"/>
	<property name="url" value="${jdbcUrl}"/>
	<property name="username" value="${user}"/>
	<property name="password" value="${password}"/>
	</bean>
	<!-- 依赖注入 -->
<!-- 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="dataSource"/>
	</bean> -->
	
	<!-- MyBatis Sql -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />  <!-- 新建 -->
	</bean>

	<!-- 扫描mapper.java -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">   <!-- 修改扫描mapper包 -->
		<property name="basePackage" value="com.st.mall.*.mapper" />
	</bean>


<!-- nnnn
事务管理器
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			name是与事务属性关联的方法名。
			通配符（*）可以用来指定一批关联到相同的事务属性的方法。
			如：'get*'、'handle*'、'on*Event'等等。
			*是对所有方法都加

			PROPAGATION_REQUIRED：
			支持当前事务，若当前没有事务，就新建一个事务。这是最常见的选择。
			PROPAGATION_SUPPORTS：
			支持当前事务，若当前没有事务，就以非事务方式执行。
			PROPAGATION_MANDATORY：
			支持当前事务，若当前没有事务，就抛出异常。
			PROPAGATION_REQUIRES_NEW：
			新建事务，若当前存在事务，把当前事务挂起。
			PROPAGATION_NOT_SUPPORTED：
			以非事务方式执行操作，若当前存在事务，就把当前事务挂起。
			PROPAGATION_NEVER：
			以非事务方式执行，若当前存在事务，则抛出异常。
			PROPAGATION_NESTED：
			支持当前事务，若当前事务存在，则执行一个嵌套事务，若当前没有事务，就新建一个事务。

		</tx:attributes>
	</tx:advice>
	用切点把事务切进去
	<aop:config>
		<aop:pointcut expression="execution(* s04.service.*.*(..))"
			id="pointcut" />
		任意公共方法的执行：
		execution(public * *(..))
		任何一个以“set”开始的方法的执行：
		execution(* set*(..))
		Service1 中的任意方法的执行：
		execution(* s04.service.Service1.*(..))
		定义在service包里的任意方法的执行：
		execution(* s04.service.*.*(..))
		定义在service包或者子包里的任意方法的执行：
		execution(* s04.service..*.*(..))
		<aop:advisor advice-ref="advice" pointcut-ref="pointcut" />
	</aop:config> -->







	</beans>